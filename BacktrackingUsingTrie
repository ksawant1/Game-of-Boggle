// Psuedo Code:
//part of dictionary - trie
bool is_prefix(String word)
{
      for each char of word
      check from root node if it contains that char as child node
      if yes goto child node and check for next char of word, continue for all characters
      if leaf node reached, add the word to result & return true
      if no, return false
      if all chars exist, return true as word is a prefix 
}

neighbour_list_pairs getNeighbours(int row, int col)
{  
      //return  all neighbour pairs for given row,col
}

void findWords( String current,row,column ) 
{
    	 if (!dictionary.is_prefix(current)) 
       {
          // if current word is not prefix of any word in dictionary, don't continue with search, return;
       }
       for each neighbour pairs from getNeighbours(row,column)
       {
    	    mark neighbour  as visited
          current + append neighbour char to current
          recursive call findWords(current ,neighbour_row, neighbour_column)
          remove last char from current
          mark it unvisited
        }
}

main()
{
      prepareDictionary() //dictionary is implemented as Trie
      gothrough each cell(i, j) and call findWords(emptystring ,i, j)
}



